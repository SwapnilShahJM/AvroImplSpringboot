/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MBPInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 820417842834304899L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MBPInformation\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"quantity\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numberOfOrders\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"bbBuySellFlag\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MBPInformation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MBPInformation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MBPInformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MBPInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MBPInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MBPInformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MBPInformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MBPInformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MBPInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long quantity;
  private java.lang.Integer price;
  private java.lang.Integer numberOfOrders;
  private java.lang.Integer bbBuySellFlag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MBPInformation() {}

  /**
   * All-args constructor.
   * @param quantity The new value for quantity
   * @param price The new value for price
   * @param numberOfOrders The new value for numberOfOrders
   * @param bbBuySellFlag The new value for bbBuySellFlag
   */
  public MBPInformation(java.lang.Long quantity, java.lang.Integer price, java.lang.Integer numberOfOrders, java.lang.Integer bbBuySellFlag) {
    this.quantity = quantity;
    this.price = price;
    this.numberOfOrders = numberOfOrders;
    this.bbBuySellFlag = bbBuySellFlag;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return quantity;
    case 1: return price;
    case 2: return numberOfOrders;
    case 3: return bbBuySellFlag;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: quantity = (java.lang.Long)value$; break;
    case 1: price = (java.lang.Integer)value$; break;
    case 2: numberOfOrders = (java.lang.Integer)value$; break;
    case 3: bbBuySellFlag = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Long getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Long value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Integer getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Integer value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'numberOfOrders' field.
   * @return The value of the 'numberOfOrders' field.
   */
  public java.lang.Integer getNumberOfOrders() {
    return numberOfOrders;
  }


  /**
   * Sets the value of the 'numberOfOrders' field.
   * @param value the value to set.
   */
  public void setNumberOfOrders(java.lang.Integer value) {
    this.numberOfOrders = value;
  }

  /**
   * Gets the value of the 'bbBuySellFlag' field.
   * @return The value of the 'bbBuySellFlag' field.
   */
  public java.lang.Integer getBbBuySellFlag() {
    return bbBuySellFlag;
  }


  /**
   * Sets the value of the 'bbBuySellFlag' field.
   * @param value the value to set.
   */
  public void setBbBuySellFlag(java.lang.Integer value) {
    this.bbBuySellFlag = value;
  }

  /**
   * Creates a new MBPInformation RecordBuilder.
   * @return A new MBPInformation RecordBuilder
   */
  public static com.example.avro.MBPInformation.Builder newBuilder() {
    return new com.example.avro.MBPInformation.Builder();
  }

  /**
   * Creates a new MBPInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MBPInformation RecordBuilder
   */
  public static com.example.avro.MBPInformation.Builder newBuilder(com.example.avro.MBPInformation.Builder other) {
    if (other == null) {
      return new com.example.avro.MBPInformation.Builder();
    } else {
      return new com.example.avro.MBPInformation.Builder(other);
    }
  }

  /**
   * Creates a new MBPInformation RecordBuilder by copying an existing MBPInformation instance.
   * @param other The existing instance to copy.
   * @return A new MBPInformation RecordBuilder
   */
  public static com.example.avro.MBPInformation.Builder newBuilder(com.example.avro.MBPInformation other) {
    if (other == null) {
      return new com.example.avro.MBPInformation.Builder();
    } else {
      return new com.example.avro.MBPInformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for MBPInformation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MBPInformation>
    implements org.apache.avro.data.RecordBuilder<MBPInformation> {

    private java.lang.Long quantity;
    private java.lang.Integer price;
    private java.lang.Integer numberOfOrders;
    private java.lang.Integer bbBuySellFlag;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.MBPInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.numberOfOrders)) {
        this.numberOfOrders = data().deepCopy(fields()[2].schema(), other.numberOfOrders);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bbBuySellFlag)) {
        this.bbBuySellFlag = data().deepCopy(fields()[3].schema(), other.bbBuySellFlag);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MBPInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.MBPInformation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberOfOrders)) {
        this.numberOfOrders = data().deepCopy(fields()[2].schema(), other.numberOfOrders);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bbBuySellFlag)) {
        this.bbBuySellFlag = data().deepCopy(fields()[3].schema(), other.bbBuySellFlag);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Long getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder setQuantity(java.lang.Long value) {
      validate(fields()[0], value);
      this.quantity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Integer getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder setPrice(java.lang.Integer value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder clearPrice() {
      price = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfOrders' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfOrders() {
      return numberOfOrders;
    }


    /**
      * Sets the value of the 'numberOfOrders' field.
      * @param value The value of 'numberOfOrders'.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder setNumberOfOrders(java.lang.Integer value) {
      validate(fields()[2], value);
      this.numberOfOrders = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfOrders' field has been set.
      * @return True if the 'numberOfOrders' field has been set, false otherwise.
      */
    public boolean hasNumberOfOrders() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberOfOrders' field.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder clearNumberOfOrders() {
      numberOfOrders = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbBuySellFlag' field.
      * @return The value.
      */
    public java.lang.Integer getBbBuySellFlag() {
      return bbBuySellFlag;
    }


    /**
      * Sets the value of the 'bbBuySellFlag' field.
      * @param value The value of 'bbBuySellFlag'.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder setBbBuySellFlag(java.lang.Integer value) {
      validate(fields()[3], value);
      this.bbBuySellFlag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bbBuySellFlag' field has been set.
      * @return True if the 'bbBuySellFlag' field has been set, false otherwise.
      */
    public boolean hasBbBuySellFlag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bbBuySellFlag' field.
      * @return This builder.
      */
    public com.example.avro.MBPInformation.Builder clearBbBuySellFlag() {
      bbBuySellFlag = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MBPInformation build() {
      try {
        MBPInformation record = new MBPInformation();
        record.quantity = fieldSetFlags()[0] ? this.quantity : (java.lang.Long) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Integer) defaultValue(fields()[1]);
        record.numberOfOrders = fieldSetFlags()[2] ? this.numberOfOrders : (java.lang.Integer) defaultValue(fields()[2]);
        record.bbBuySellFlag = fieldSetFlags()[3] ? this.bbBuySellFlag : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MBPInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<MBPInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MBPInformation>
    READER$ = (org.apache.avro.io.DatumReader<MBPInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.quantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.quantity);
    }

    if (this.price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.price);
    }

    if (this.numberOfOrders == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.numberOfOrders);
    }

    if (this.bbBuySellFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.bbBuySellFlag);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.quantity = null;
      } else {
        this.quantity = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.price = null;
      } else {
        this.price = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.numberOfOrders = null;
      } else {
        this.numberOfOrders = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbBuySellFlag = null;
      } else {
        this.bbBuySellFlag = in.readInt();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.quantity = null;
          } else {
            this.quantity = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.price = null;
          } else {
            this.price = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.numberOfOrders = null;
          } else {
            this.numberOfOrders = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbBuySellFlag = null;
          } else {
            this.bbBuySellFlag = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










