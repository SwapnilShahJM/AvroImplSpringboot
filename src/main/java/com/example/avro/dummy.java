/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class dummy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 58958245100968317L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"dummy\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"token\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"bookType\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"tradingStatus\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"volumeTradedToday\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"lastTradedPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"netChangeIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"filler\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"netPriceChangeFromClosingPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lastTradeQuantity\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lastTradeTime\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"averageTradePrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"auctionNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"auctionStatus\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"initiatorType\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"initiatorPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"initiatorQuantity\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"auctionPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"auctionQuantity\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"recordBuffer\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"bbTotalBuyFlag\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"bbTotalSellFlag\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"totalBuyQuantity\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"totalSellQuantity\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"mbpIndicator\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"closingPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"openPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"highPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lowPrice\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"reserved\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<dummy> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<dummy> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<dummy> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<dummy> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<dummy> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this dummy to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a dummy from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a dummy instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static dummy fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer token;
  private java.lang.Integer bookType;
  private java.lang.Integer tradingStatus;
  private java.lang.Long volumeTradedToday;
  private java.lang.Integer lastTradedPrice;
  private java.lang.CharSequence netChangeIndicator;
  private java.lang.CharSequence filler;
  private java.lang.Integer netPriceChangeFromClosingPrice;
  private java.lang.Integer lastTradeQuantity;
  private java.lang.Integer lastTradeTime;
  private java.lang.Integer averageTradePrice;
  private java.lang.Integer auctionNumber;
  private java.lang.Integer auctionStatus;
  private java.lang.Integer initiatorType;
  private java.lang.Integer initiatorPrice;
  private java.lang.Integer initiatorQuantity;
  private java.lang.Integer auctionPrice;
  private java.lang.Integer auctionQuantity;
  private java.util.List<java.lang.CharSequence> recordBuffer;
  private java.lang.Integer bbTotalBuyFlag;
  private java.lang.Integer bbTotalSellFlag;
  private java.lang.Long totalBuyQuantity;
  private java.lang.Long totalSellQuantity;
  private java.lang.Integer mbpIndicator;
  private java.lang.Integer closingPrice;
  private java.lang.Integer openPrice;
  private java.lang.Integer highPrice;
  private java.lang.Integer lowPrice;
  private java.util.List<java.lang.CharSequence> reserved;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public dummy() {}

  /**
   * All-args constructor.
   * @param token The new value for token
   * @param bookType The new value for bookType
   * @param tradingStatus The new value for tradingStatus
   * @param volumeTradedToday The new value for volumeTradedToday
   * @param lastTradedPrice The new value for lastTradedPrice
   * @param netChangeIndicator The new value for netChangeIndicator
   * @param filler The new value for filler
   * @param netPriceChangeFromClosingPrice The new value for netPriceChangeFromClosingPrice
   * @param lastTradeQuantity The new value for lastTradeQuantity
   * @param lastTradeTime The new value for lastTradeTime
   * @param averageTradePrice The new value for averageTradePrice
   * @param auctionNumber The new value for auctionNumber
   * @param auctionStatus The new value for auctionStatus
   * @param initiatorType The new value for initiatorType
   * @param initiatorPrice The new value for initiatorPrice
   * @param initiatorQuantity The new value for initiatorQuantity
   * @param auctionPrice The new value for auctionPrice
   * @param auctionQuantity The new value for auctionQuantity
   * @param recordBuffer The new value for recordBuffer
   * @param bbTotalBuyFlag The new value for bbTotalBuyFlag
   * @param bbTotalSellFlag The new value for bbTotalSellFlag
   * @param totalBuyQuantity The new value for totalBuyQuantity
   * @param totalSellQuantity The new value for totalSellQuantity
   * @param mbpIndicator The new value for mbpIndicator
   * @param closingPrice The new value for closingPrice
   * @param openPrice The new value for openPrice
   * @param highPrice The new value for highPrice
   * @param lowPrice The new value for lowPrice
   * @param reserved The new value for reserved
   */
  public dummy(java.lang.Integer token, java.lang.Integer bookType, java.lang.Integer tradingStatus, java.lang.Long volumeTradedToday, java.lang.Integer lastTradedPrice, java.lang.CharSequence netChangeIndicator, java.lang.CharSequence filler, java.lang.Integer netPriceChangeFromClosingPrice, java.lang.Integer lastTradeQuantity, java.lang.Integer lastTradeTime, java.lang.Integer averageTradePrice, java.lang.Integer auctionNumber, java.lang.Integer auctionStatus, java.lang.Integer initiatorType, java.lang.Integer initiatorPrice, java.lang.Integer initiatorQuantity, java.lang.Integer auctionPrice, java.lang.Integer auctionQuantity, java.util.List<java.lang.CharSequence> recordBuffer, java.lang.Integer bbTotalBuyFlag, java.lang.Integer bbTotalSellFlag, java.lang.Long totalBuyQuantity, java.lang.Long totalSellQuantity, java.lang.Integer mbpIndicator, java.lang.Integer closingPrice, java.lang.Integer openPrice, java.lang.Integer highPrice, java.lang.Integer lowPrice, java.util.List<java.lang.CharSequence> reserved) {
    this.token = token;
    this.bookType = bookType;
    this.tradingStatus = tradingStatus;
    this.volumeTradedToday = volumeTradedToday;
    this.lastTradedPrice = lastTradedPrice;
    this.netChangeIndicator = netChangeIndicator;
    this.filler = filler;
    this.netPriceChangeFromClosingPrice = netPriceChangeFromClosingPrice;
    this.lastTradeQuantity = lastTradeQuantity;
    this.lastTradeTime = lastTradeTime;
    this.averageTradePrice = averageTradePrice;
    this.auctionNumber = auctionNumber;
    this.auctionStatus = auctionStatus;
    this.initiatorType = initiatorType;
    this.initiatorPrice = initiatorPrice;
    this.initiatorQuantity = initiatorQuantity;
    this.auctionPrice = auctionPrice;
    this.auctionQuantity = auctionQuantity;
    this.recordBuffer = recordBuffer;
    this.bbTotalBuyFlag = bbTotalBuyFlag;
    this.bbTotalSellFlag = bbTotalSellFlag;
    this.totalBuyQuantity = totalBuyQuantity;
    this.totalSellQuantity = totalSellQuantity;
    this.mbpIndicator = mbpIndicator;
    this.closingPrice = closingPrice;
    this.openPrice = openPrice;
    this.highPrice = highPrice;
    this.lowPrice = lowPrice;
    this.reserved = reserved;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return token;
    case 1: return bookType;
    case 2: return tradingStatus;
    case 3: return volumeTradedToday;
    case 4: return lastTradedPrice;
    case 5: return netChangeIndicator;
    case 6: return filler;
    case 7: return netPriceChangeFromClosingPrice;
    case 8: return lastTradeQuantity;
    case 9: return lastTradeTime;
    case 10: return averageTradePrice;
    case 11: return auctionNumber;
    case 12: return auctionStatus;
    case 13: return initiatorType;
    case 14: return initiatorPrice;
    case 15: return initiatorQuantity;
    case 16: return auctionPrice;
    case 17: return auctionQuantity;
    case 18: return recordBuffer;
    case 19: return bbTotalBuyFlag;
    case 20: return bbTotalSellFlag;
    case 21: return totalBuyQuantity;
    case 22: return totalSellQuantity;
    case 23: return mbpIndicator;
    case 24: return closingPrice;
    case 25: return openPrice;
    case 26: return highPrice;
    case 27: return lowPrice;
    case 28: return reserved;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: token = (java.lang.Integer)value$; break;
    case 1: bookType = (java.lang.Integer)value$; break;
    case 2: tradingStatus = (java.lang.Integer)value$; break;
    case 3: volumeTradedToday = (java.lang.Long)value$; break;
    case 4: lastTradedPrice = (java.lang.Integer)value$; break;
    case 5: netChangeIndicator = (java.lang.CharSequence)value$; break;
    case 6: filler = (java.lang.CharSequence)value$; break;
    case 7: netPriceChangeFromClosingPrice = (java.lang.Integer)value$; break;
    case 8: lastTradeQuantity = (java.lang.Integer)value$; break;
    case 9: lastTradeTime = (java.lang.Integer)value$; break;
    case 10: averageTradePrice = (java.lang.Integer)value$; break;
    case 11: auctionNumber = (java.lang.Integer)value$; break;
    case 12: auctionStatus = (java.lang.Integer)value$; break;
    case 13: initiatorType = (java.lang.Integer)value$; break;
    case 14: initiatorPrice = (java.lang.Integer)value$; break;
    case 15: initiatorQuantity = (java.lang.Integer)value$; break;
    case 16: auctionPrice = (java.lang.Integer)value$; break;
    case 17: auctionQuantity = (java.lang.Integer)value$; break;
    case 18: recordBuffer = (java.util.List<java.lang.CharSequence>)value$; break;
    case 19: bbTotalBuyFlag = (java.lang.Integer)value$; break;
    case 20: bbTotalSellFlag = (java.lang.Integer)value$; break;
    case 21: totalBuyQuantity = (java.lang.Long)value$; break;
    case 22: totalSellQuantity = (java.lang.Long)value$; break;
    case 23: mbpIndicator = (java.lang.Integer)value$; break;
    case 24: closingPrice = (java.lang.Integer)value$; break;
    case 25: openPrice = (java.lang.Integer)value$; break;
    case 26: highPrice = (java.lang.Integer)value$; break;
    case 27: lowPrice = (java.lang.Integer)value$; break;
    case 28: reserved = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public java.lang.Integer getToken() {
    return token;
  }


  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.Integer value) {
    this.token = value;
  }

  /**
   * Gets the value of the 'bookType' field.
   * @return The value of the 'bookType' field.
   */
  public java.lang.Integer getBookType() {
    return bookType;
  }


  /**
   * Sets the value of the 'bookType' field.
   * @param value the value to set.
   */
  public void setBookType(java.lang.Integer value) {
    this.bookType = value;
  }

  /**
   * Gets the value of the 'tradingStatus' field.
   * @return The value of the 'tradingStatus' field.
   */
  public java.lang.Integer getTradingStatus() {
    return tradingStatus;
  }


  /**
   * Sets the value of the 'tradingStatus' field.
   * @param value the value to set.
   */
  public void setTradingStatus(java.lang.Integer value) {
    this.tradingStatus = value;
  }

  /**
   * Gets the value of the 'volumeTradedToday' field.
   * @return The value of the 'volumeTradedToday' field.
   */
  public java.lang.Long getVolumeTradedToday() {
    return volumeTradedToday;
  }


  /**
   * Sets the value of the 'volumeTradedToday' field.
   * @param value the value to set.
   */
  public void setVolumeTradedToday(java.lang.Long value) {
    this.volumeTradedToday = value;
  }

  /**
   * Gets the value of the 'lastTradedPrice' field.
   * @return The value of the 'lastTradedPrice' field.
   */
  public java.lang.Integer getLastTradedPrice() {
    return lastTradedPrice;
  }


  /**
   * Sets the value of the 'lastTradedPrice' field.
   * @param value the value to set.
   */
  public void setLastTradedPrice(java.lang.Integer value) {
    this.lastTradedPrice = value;
  }

  /**
   * Gets the value of the 'netChangeIndicator' field.
   * @return The value of the 'netChangeIndicator' field.
   */
  public java.lang.CharSequence getNetChangeIndicator() {
    return netChangeIndicator;
  }


  /**
   * Sets the value of the 'netChangeIndicator' field.
   * @param value the value to set.
   */
  public void setNetChangeIndicator(java.lang.CharSequence value) {
    this.netChangeIndicator = value;
  }

  /**
   * Gets the value of the 'filler' field.
   * @return The value of the 'filler' field.
   */
  public java.lang.CharSequence getFiller() {
    return filler;
  }


  /**
   * Sets the value of the 'filler' field.
   * @param value the value to set.
   */
  public void setFiller(java.lang.CharSequence value) {
    this.filler = value;
  }

  /**
   * Gets the value of the 'netPriceChangeFromClosingPrice' field.
   * @return The value of the 'netPriceChangeFromClosingPrice' field.
   */
  public java.lang.Integer getNetPriceChangeFromClosingPrice() {
    return netPriceChangeFromClosingPrice;
  }


  /**
   * Sets the value of the 'netPriceChangeFromClosingPrice' field.
   * @param value the value to set.
   */
  public void setNetPriceChangeFromClosingPrice(java.lang.Integer value) {
    this.netPriceChangeFromClosingPrice = value;
  }

  /**
   * Gets the value of the 'lastTradeQuantity' field.
   * @return The value of the 'lastTradeQuantity' field.
   */
  public java.lang.Integer getLastTradeQuantity() {
    return lastTradeQuantity;
  }


  /**
   * Sets the value of the 'lastTradeQuantity' field.
   * @param value the value to set.
   */
  public void setLastTradeQuantity(java.lang.Integer value) {
    this.lastTradeQuantity = value;
  }

  /**
   * Gets the value of the 'lastTradeTime' field.
   * @return The value of the 'lastTradeTime' field.
   */
  public java.lang.Integer getLastTradeTime() {
    return lastTradeTime;
  }


  /**
   * Sets the value of the 'lastTradeTime' field.
   * @param value the value to set.
   */
  public void setLastTradeTime(java.lang.Integer value) {
    this.lastTradeTime = value;
  }

  /**
   * Gets the value of the 'averageTradePrice' field.
   * @return The value of the 'averageTradePrice' field.
   */
  public java.lang.Integer getAverageTradePrice() {
    return averageTradePrice;
  }


  /**
   * Sets the value of the 'averageTradePrice' field.
   * @param value the value to set.
   */
  public void setAverageTradePrice(java.lang.Integer value) {
    this.averageTradePrice = value;
  }

  /**
   * Gets the value of the 'auctionNumber' field.
   * @return The value of the 'auctionNumber' field.
   */
  public java.lang.Integer getAuctionNumber() {
    return auctionNumber;
  }


  /**
   * Sets the value of the 'auctionNumber' field.
   * @param value the value to set.
   */
  public void setAuctionNumber(java.lang.Integer value) {
    this.auctionNumber = value;
  }

  /**
   * Gets the value of the 'auctionStatus' field.
   * @return The value of the 'auctionStatus' field.
   */
  public java.lang.Integer getAuctionStatus() {
    return auctionStatus;
  }


  /**
   * Sets the value of the 'auctionStatus' field.
   * @param value the value to set.
   */
  public void setAuctionStatus(java.lang.Integer value) {
    this.auctionStatus = value;
  }

  /**
   * Gets the value of the 'initiatorType' field.
   * @return The value of the 'initiatorType' field.
   */
  public java.lang.Integer getInitiatorType() {
    return initiatorType;
  }


  /**
   * Sets the value of the 'initiatorType' field.
   * @param value the value to set.
   */
  public void setInitiatorType(java.lang.Integer value) {
    this.initiatorType = value;
  }

  /**
   * Gets the value of the 'initiatorPrice' field.
   * @return The value of the 'initiatorPrice' field.
   */
  public java.lang.Integer getInitiatorPrice() {
    return initiatorPrice;
  }


  /**
   * Sets the value of the 'initiatorPrice' field.
   * @param value the value to set.
   */
  public void setInitiatorPrice(java.lang.Integer value) {
    this.initiatorPrice = value;
  }

  /**
   * Gets the value of the 'initiatorQuantity' field.
   * @return The value of the 'initiatorQuantity' field.
   */
  public java.lang.Integer getInitiatorQuantity() {
    return initiatorQuantity;
  }


  /**
   * Sets the value of the 'initiatorQuantity' field.
   * @param value the value to set.
   */
  public void setInitiatorQuantity(java.lang.Integer value) {
    this.initiatorQuantity = value;
  }

  /**
   * Gets the value of the 'auctionPrice' field.
   * @return The value of the 'auctionPrice' field.
   */
  public java.lang.Integer getAuctionPrice() {
    return auctionPrice;
  }


  /**
   * Sets the value of the 'auctionPrice' field.
   * @param value the value to set.
   */
  public void setAuctionPrice(java.lang.Integer value) {
    this.auctionPrice = value;
  }

  /**
   * Gets the value of the 'auctionQuantity' field.
   * @return The value of the 'auctionQuantity' field.
   */
  public java.lang.Integer getAuctionQuantity() {
    return auctionQuantity;
  }


  /**
   * Sets the value of the 'auctionQuantity' field.
   * @param value the value to set.
   */
  public void setAuctionQuantity(java.lang.Integer value) {
    this.auctionQuantity = value;
  }

  /**
   * Gets the value of the 'recordBuffer' field.
   * @return The value of the 'recordBuffer' field.
   */
  public java.util.List<java.lang.CharSequence> getRecordBuffer() {
    return recordBuffer;
  }


  /**
   * Sets the value of the 'recordBuffer' field.
   * @param value the value to set.
   */
  public void setRecordBuffer(java.util.List<java.lang.CharSequence> value) {
    this.recordBuffer = value;
  }

  /**
   * Gets the value of the 'bbTotalBuyFlag' field.
   * @return The value of the 'bbTotalBuyFlag' field.
   */
  public java.lang.Integer getBbTotalBuyFlag() {
    return bbTotalBuyFlag;
  }


  /**
   * Sets the value of the 'bbTotalBuyFlag' field.
   * @param value the value to set.
   */
  public void setBbTotalBuyFlag(java.lang.Integer value) {
    this.bbTotalBuyFlag = value;
  }

  /**
   * Gets the value of the 'bbTotalSellFlag' field.
   * @return The value of the 'bbTotalSellFlag' field.
   */
  public java.lang.Integer getBbTotalSellFlag() {
    return bbTotalSellFlag;
  }


  /**
   * Sets the value of the 'bbTotalSellFlag' field.
   * @param value the value to set.
   */
  public void setBbTotalSellFlag(java.lang.Integer value) {
    this.bbTotalSellFlag = value;
  }

  /**
   * Gets the value of the 'totalBuyQuantity' field.
   * @return The value of the 'totalBuyQuantity' field.
   */
  public java.lang.Long getTotalBuyQuantity() {
    return totalBuyQuantity;
  }


  /**
   * Sets the value of the 'totalBuyQuantity' field.
   * @param value the value to set.
   */
  public void setTotalBuyQuantity(java.lang.Long value) {
    this.totalBuyQuantity = value;
  }

  /**
   * Gets the value of the 'totalSellQuantity' field.
   * @return The value of the 'totalSellQuantity' field.
   */
  public java.lang.Long getTotalSellQuantity() {
    return totalSellQuantity;
  }


  /**
   * Sets the value of the 'totalSellQuantity' field.
   * @param value the value to set.
   */
  public void setTotalSellQuantity(java.lang.Long value) {
    this.totalSellQuantity = value;
  }

  /**
   * Gets the value of the 'mbpIndicator' field.
   * @return The value of the 'mbpIndicator' field.
   */
  public java.lang.Integer getMbpIndicator() {
    return mbpIndicator;
  }


  /**
   * Sets the value of the 'mbpIndicator' field.
   * @param value the value to set.
   */
  public void setMbpIndicator(java.lang.Integer value) {
    this.mbpIndicator = value;
  }

  /**
   * Gets the value of the 'closingPrice' field.
   * @return The value of the 'closingPrice' field.
   */
  public java.lang.Integer getClosingPrice() {
    return closingPrice;
  }


  /**
   * Sets the value of the 'closingPrice' field.
   * @param value the value to set.
   */
  public void setClosingPrice(java.lang.Integer value) {
    this.closingPrice = value;
  }

  /**
   * Gets the value of the 'openPrice' field.
   * @return The value of the 'openPrice' field.
   */
  public java.lang.Integer getOpenPrice() {
    return openPrice;
  }


  /**
   * Sets the value of the 'openPrice' field.
   * @param value the value to set.
   */
  public void setOpenPrice(java.lang.Integer value) {
    this.openPrice = value;
  }

  /**
   * Gets the value of the 'highPrice' field.
   * @return The value of the 'highPrice' field.
   */
  public java.lang.Integer getHighPrice() {
    return highPrice;
  }


  /**
   * Sets the value of the 'highPrice' field.
   * @param value the value to set.
   */
  public void setHighPrice(java.lang.Integer value) {
    this.highPrice = value;
  }

  /**
   * Gets the value of the 'lowPrice' field.
   * @return The value of the 'lowPrice' field.
   */
  public java.lang.Integer getLowPrice() {
    return lowPrice;
  }


  /**
   * Sets the value of the 'lowPrice' field.
   * @param value the value to set.
   */
  public void setLowPrice(java.lang.Integer value) {
    this.lowPrice = value;
  }

  /**
   * Gets the value of the 'reserved' field.
   * @return The value of the 'reserved' field.
   */
  public java.util.List<java.lang.CharSequence> getReserved() {
    return reserved;
  }


  /**
   * Sets the value of the 'reserved' field.
   * @param value the value to set.
   */
  public void setReserved(java.util.List<java.lang.CharSequence> value) {
    this.reserved = value;
  }

  /**
   * Creates a new dummy RecordBuilder.
   * @return A new dummy RecordBuilder
   */
  public static com.example.avro.dummy.Builder newBuilder() {
    return new com.example.avro.dummy.Builder();
  }

  /**
   * Creates a new dummy RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new dummy RecordBuilder
   */
  public static com.example.avro.dummy.Builder newBuilder(com.example.avro.dummy.Builder other) {
    if (other == null) {
      return new com.example.avro.dummy.Builder();
    } else {
      return new com.example.avro.dummy.Builder(other);
    }
  }

  /**
   * Creates a new dummy RecordBuilder by copying an existing dummy instance.
   * @param other The existing instance to copy.
   * @return A new dummy RecordBuilder
   */
  public static com.example.avro.dummy.Builder newBuilder(com.example.avro.dummy other) {
    if (other == null) {
      return new com.example.avro.dummy.Builder();
    } else {
      return new com.example.avro.dummy.Builder(other);
    }
  }

  /**
   * RecordBuilder for dummy instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<dummy>
    implements org.apache.avro.data.RecordBuilder<dummy> {

    private java.lang.Integer token;
    private java.lang.Integer bookType;
    private java.lang.Integer tradingStatus;
    private java.lang.Long volumeTradedToday;
    private java.lang.Integer lastTradedPrice;
    private java.lang.CharSequence netChangeIndicator;
    private java.lang.CharSequence filler;
    private java.lang.Integer netPriceChangeFromClosingPrice;
    private java.lang.Integer lastTradeQuantity;
    private java.lang.Integer lastTradeTime;
    private java.lang.Integer averageTradePrice;
    private java.lang.Integer auctionNumber;
    private java.lang.Integer auctionStatus;
    private java.lang.Integer initiatorType;
    private java.lang.Integer initiatorPrice;
    private java.lang.Integer initiatorQuantity;
    private java.lang.Integer auctionPrice;
    private java.lang.Integer auctionQuantity;
    private java.util.List<java.lang.CharSequence> recordBuffer;
    private java.lang.Integer bbTotalBuyFlag;
    private java.lang.Integer bbTotalSellFlag;
    private java.lang.Long totalBuyQuantity;
    private java.lang.Long totalSellQuantity;
    private java.lang.Integer mbpIndicator;
    private java.lang.Integer closingPrice;
    private java.lang.Integer openPrice;
    private java.lang.Integer highPrice;
    private java.lang.Integer lowPrice;
    private java.util.List<java.lang.CharSequence> reserved;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.dummy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.token)) {
        this.token = data().deepCopy(fields()[0].schema(), other.token);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bookType)) {
        this.bookType = data().deepCopy(fields()[1].schema(), other.bookType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradingStatus)) {
        this.tradingStatus = data().deepCopy(fields()[2].schema(), other.tradingStatus);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.volumeTradedToday)) {
        this.volumeTradedToday = data().deepCopy(fields()[3].schema(), other.volumeTradedToday);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lastTradedPrice)) {
        this.lastTradedPrice = data().deepCopy(fields()[4].schema(), other.lastTradedPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.netChangeIndicator)) {
        this.netChangeIndicator = data().deepCopy(fields()[5].schema(), other.netChangeIndicator);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.filler)) {
        this.filler = data().deepCopy(fields()[6].schema(), other.filler);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.netPriceChangeFromClosingPrice)) {
        this.netPriceChangeFromClosingPrice = data().deepCopy(fields()[7].schema(), other.netPriceChangeFromClosingPrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.lastTradeQuantity)) {
        this.lastTradeQuantity = data().deepCopy(fields()[8].schema(), other.lastTradeQuantity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.lastTradeTime)) {
        this.lastTradeTime = data().deepCopy(fields()[9].schema(), other.lastTradeTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.averageTradePrice)) {
        this.averageTradePrice = data().deepCopy(fields()[10].schema(), other.averageTradePrice);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.auctionNumber)) {
        this.auctionNumber = data().deepCopy(fields()[11].schema(), other.auctionNumber);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.auctionStatus)) {
        this.auctionStatus = data().deepCopy(fields()[12].schema(), other.auctionStatus);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.initiatorType)) {
        this.initiatorType = data().deepCopy(fields()[13].schema(), other.initiatorType);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.initiatorPrice)) {
        this.initiatorPrice = data().deepCopy(fields()[14].schema(), other.initiatorPrice);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.initiatorQuantity)) {
        this.initiatorQuantity = data().deepCopy(fields()[15].schema(), other.initiatorQuantity);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.auctionPrice)) {
        this.auctionPrice = data().deepCopy(fields()[16].schema(), other.auctionPrice);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.auctionQuantity)) {
        this.auctionQuantity = data().deepCopy(fields()[17].schema(), other.auctionQuantity);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.recordBuffer)) {
        this.recordBuffer = data().deepCopy(fields()[18].schema(), other.recordBuffer);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.bbTotalBuyFlag)) {
        this.bbTotalBuyFlag = data().deepCopy(fields()[19].schema(), other.bbTotalBuyFlag);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.bbTotalSellFlag)) {
        this.bbTotalSellFlag = data().deepCopy(fields()[20].schema(), other.bbTotalSellFlag);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.totalBuyQuantity)) {
        this.totalBuyQuantity = data().deepCopy(fields()[21].schema(), other.totalBuyQuantity);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.totalSellQuantity)) {
        this.totalSellQuantity = data().deepCopy(fields()[22].schema(), other.totalSellQuantity);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.mbpIndicator)) {
        this.mbpIndicator = data().deepCopy(fields()[23].schema(), other.mbpIndicator);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.closingPrice)) {
        this.closingPrice = data().deepCopy(fields()[24].schema(), other.closingPrice);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[25].schema(), other.openPrice);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[26].schema(), other.highPrice);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[27].schema(), other.lowPrice);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.reserved)) {
        this.reserved = data().deepCopy(fields()[28].schema(), other.reserved);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
    }

    /**
     * Creates a Builder by copying an existing dummy instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.dummy other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.token)) {
        this.token = data().deepCopy(fields()[0].schema(), other.token);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bookType)) {
        this.bookType = data().deepCopy(fields()[1].schema(), other.bookType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradingStatus)) {
        this.tradingStatus = data().deepCopy(fields()[2].schema(), other.tradingStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.volumeTradedToday)) {
        this.volumeTradedToday = data().deepCopy(fields()[3].schema(), other.volumeTradedToday);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastTradedPrice)) {
        this.lastTradedPrice = data().deepCopy(fields()[4].schema(), other.lastTradedPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.netChangeIndicator)) {
        this.netChangeIndicator = data().deepCopy(fields()[5].schema(), other.netChangeIndicator);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.filler)) {
        this.filler = data().deepCopy(fields()[6].schema(), other.filler);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.netPriceChangeFromClosingPrice)) {
        this.netPriceChangeFromClosingPrice = data().deepCopy(fields()[7].schema(), other.netPriceChangeFromClosingPrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastTradeQuantity)) {
        this.lastTradeQuantity = data().deepCopy(fields()[8].schema(), other.lastTradeQuantity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lastTradeTime)) {
        this.lastTradeTime = data().deepCopy(fields()[9].schema(), other.lastTradeTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.averageTradePrice)) {
        this.averageTradePrice = data().deepCopy(fields()[10].schema(), other.averageTradePrice);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.auctionNumber)) {
        this.auctionNumber = data().deepCopy(fields()[11].schema(), other.auctionNumber);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.auctionStatus)) {
        this.auctionStatus = data().deepCopy(fields()[12].schema(), other.auctionStatus);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.initiatorType)) {
        this.initiatorType = data().deepCopy(fields()[13].schema(), other.initiatorType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.initiatorPrice)) {
        this.initiatorPrice = data().deepCopy(fields()[14].schema(), other.initiatorPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.initiatorQuantity)) {
        this.initiatorQuantity = data().deepCopy(fields()[15].schema(), other.initiatorQuantity);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.auctionPrice)) {
        this.auctionPrice = data().deepCopy(fields()[16].schema(), other.auctionPrice);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.auctionQuantity)) {
        this.auctionQuantity = data().deepCopy(fields()[17].schema(), other.auctionQuantity);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.recordBuffer)) {
        this.recordBuffer = data().deepCopy(fields()[18].schema(), other.recordBuffer);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.bbTotalBuyFlag)) {
        this.bbTotalBuyFlag = data().deepCopy(fields()[19].schema(), other.bbTotalBuyFlag);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.bbTotalSellFlag)) {
        this.bbTotalSellFlag = data().deepCopy(fields()[20].schema(), other.bbTotalSellFlag);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.totalBuyQuantity)) {
        this.totalBuyQuantity = data().deepCopy(fields()[21].schema(), other.totalBuyQuantity);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.totalSellQuantity)) {
        this.totalSellQuantity = data().deepCopy(fields()[22].schema(), other.totalSellQuantity);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.mbpIndicator)) {
        this.mbpIndicator = data().deepCopy(fields()[23].schema(), other.mbpIndicator);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.closingPrice)) {
        this.closingPrice = data().deepCopy(fields()[24].schema(), other.closingPrice);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[25].schema(), other.openPrice);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[26].schema(), other.highPrice);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[27].schema(), other.lowPrice);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.reserved)) {
        this.reserved = data().deepCopy(fields()[28].schema(), other.reserved);
        fieldSetFlags()[28] = true;
      }
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public java.lang.Integer getToken() {
      return token;
    }


    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setToken(java.lang.Integer value) {
      validate(fields()[0], value);
      this.token = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearToken() {
      token = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookType' field.
      * @return The value.
      */
    public java.lang.Integer getBookType() {
      return bookType;
    }


    /**
      * Sets the value of the 'bookType' field.
      * @param value The value of 'bookType'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setBookType(java.lang.Integer value) {
      validate(fields()[1], value);
      this.bookType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bookType' field has been set.
      * @return True if the 'bookType' field has been set, false otherwise.
      */
    public boolean hasBookType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bookType' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearBookType() {
      bookType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradingStatus' field.
      * @return The value.
      */
    public java.lang.Integer getTradingStatus() {
      return tradingStatus;
    }


    /**
      * Sets the value of the 'tradingStatus' field.
      * @param value The value of 'tradingStatus'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setTradingStatus(java.lang.Integer value) {
      validate(fields()[2], value);
      this.tradingStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradingStatus' field has been set.
      * @return True if the 'tradingStatus' field has been set, false otherwise.
      */
    public boolean hasTradingStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradingStatus' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearTradingStatus() {
      tradingStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'volumeTradedToday' field.
      * @return The value.
      */
    public java.lang.Long getVolumeTradedToday() {
      return volumeTradedToday;
    }


    /**
      * Sets the value of the 'volumeTradedToday' field.
      * @param value The value of 'volumeTradedToday'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setVolumeTradedToday(java.lang.Long value) {
      validate(fields()[3], value);
      this.volumeTradedToday = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'volumeTradedToday' field has been set.
      * @return True if the 'volumeTradedToday' field has been set, false otherwise.
      */
    public boolean hasVolumeTradedToday() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'volumeTradedToday' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearVolumeTradedToday() {
      volumeTradedToday = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastTradedPrice' field.
      * @return The value.
      */
    public java.lang.Integer getLastTradedPrice() {
      return lastTradedPrice;
    }


    /**
      * Sets the value of the 'lastTradedPrice' field.
      * @param value The value of 'lastTradedPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setLastTradedPrice(java.lang.Integer value) {
      validate(fields()[4], value);
      this.lastTradedPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastTradedPrice' field has been set.
      * @return True if the 'lastTradedPrice' field has been set, false otherwise.
      */
    public boolean hasLastTradedPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastTradedPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearLastTradedPrice() {
      lastTradedPrice = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'netChangeIndicator' field.
      * @return The value.
      */
    public java.lang.CharSequence getNetChangeIndicator() {
      return netChangeIndicator;
    }


    /**
      * Sets the value of the 'netChangeIndicator' field.
      * @param value The value of 'netChangeIndicator'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setNetChangeIndicator(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.netChangeIndicator = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'netChangeIndicator' field has been set.
      * @return True if the 'netChangeIndicator' field has been set, false otherwise.
      */
    public boolean hasNetChangeIndicator() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'netChangeIndicator' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearNetChangeIndicator() {
      netChangeIndicator = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'filler' field.
      * @return The value.
      */
    public java.lang.CharSequence getFiller() {
      return filler;
    }


    /**
      * Sets the value of the 'filler' field.
      * @param value The value of 'filler'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setFiller(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.filler = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'filler' field has been set.
      * @return True if the 'filler' field has been set, false otherwise.
      */
    public boolean hasFiller() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'filler' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearFiller() {
      filler = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'netPriceChangeFromClosingPrice' field.
      * @return The value.
      */
    public java.lang.Integer getNetPriceChangeFromClosingPrice() {
      return netPriceChangeFromClosingPrice;
    }


    /**
      * Sets the value of the 'netPriceChangeFromClosingPrice' field.
      * @param value The value of 'netPriceChangeFromClosingPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setNetPriceChangeFromClosingPrice(java.lang.Integer value) {
      validate(fields()[7], value);
      this.netPriceChangeFromClosingPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'netPriceChangeFromClosingPrice' field has been set.
      * @return True if the 'netPriceChangeFromClosingPrice' field has been set, false otherwise.
      */
    public boolean hasNetPriceChangeFromClosingPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'netPriceChangeFromClosingPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearNetPriceChangeFromClosingPrice() {
      netPriceChangeFromClosingPrice = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastTradeQuantity' field.
      * @return The value.
      */
    public java.lang.Integer getLastTradeQuantity() {
      return lastTradeQuantity;
    }


    /**
      * Sets the value of the 'lastTradeQuantity' field.
      * @param value The value of 'lastTradeQuantity'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setLastTradeQuantity(java.lang.Integer value) {
      validate(fields()[8], value);
      this.lastTradeQuantity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lastTradeQuantity' field has been set.
      * @return True if the 'lastTradeQuantity' field has been set, false otherwise.
      */
    public boolean hasLastTradeQuantity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'lastTradeQuantity' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearLastTradeQuantity() {
      lastTradeQuantity = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastTradeTime' field.
      * @return The value.
      */
    public java.lang.Integer getLastTradeTime() {
      return lastTradeTime;
    }


    /**
      * Sets the value of the 'lastTradeTime' field.
      * @param value The value of 'lastTradeTime'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setLastTradeTime(java.lang.Integer value) {
      validate(fields()[9], value);
      this.lastTradeTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'lastTradeTime' field has been set.
      * @return True if the 'lastTradeTime' field has been set, false otherwise.
      */
    public boolean hasLastTradeTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'lastTradeTime' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearLastTradeTime() {
      lastTradeTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageTradePrice' field.
      * @return The value.
      */
    public java.lang.Integer getAverageTradePrice() {
      return averageTradePrice;
    }


    /**
      * Sets the value of the 'averageTradePrice' field.
      * @param value The value of 'averageTradePrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setAverageTradePrice(java.lang.Integer value) {
      validate(fields()[10], value);
      this.averageTradePrice = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'averageTradePrice' field has been set.
      * @return True if the 'averageTradePrice' field has been set, false otherwise.
      */
    public boolean hasAverageTradePrice() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'averageTradePrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearAverageTradePrice() {
      averageTradePrice = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'auctionNumber' field.
      * @return The value.
      */
    public java.lang.Integer getAuctionNumber() {
      return auctionNumber;
    }


    /**
      * Sets the value of the 'auctionNumber' field.
      * @param value The value of 'auctionNumber'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setAuctionNumber(java.lang.Integer value) {
      validate(fields()[11], value);
      this.auctionNumber = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'auctionNumber' field has been set.
      * @return True if the 'auctionNumber' field has been set, false otherwise.
      */
    public boolean hasAuctionNumber() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'auctionNumber' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearAuctionNumber() {
      auctionNumber = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'auctionStatus' field.
      * @return The value.
      */
    public java.lang.Integer getAuctionStatus() {
      return auctionStatus;
    }


    /**
      * Sets the value of the 'auctionStatus' field.
      * @param value The value of 'auctionStatus'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setAuctionStatus(java.lang.Integer value) {
      validate(fields()[12], value);
      this.auctionStatus = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'auctionStatus' field has been set.
      * @return True if the 'auctionStatus' field has been set, false otherwise.
      */
    public boolean hasAuctionStatus() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'auctionStatus' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearAuctionStatus() {
      auctionStatus = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorType' field.
      * @return The value.
      */
    public java.lang.Integer getInitiatorType() {
      return initiatorType;
    }


    /**
      * Sets the value of the 'initiatorType' field.
      * @param value The value of 'initiatorType'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setInitiatorType(java.lang.Integer value) {
      validate(fields()[13], value);
      this.initiatorType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorType' field has been set.
      * @return True if the 'initiatorType' field has been set, false otherwise.
      */
    public boolean hasInitiatorType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'initiatorType' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearInitiatorType() {
      initiatorType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorPrice' field.
      * @return The value.
      */
    public java.lang.Integer getInitiatorPrice() {
      return initiatorPrice;
    }


    /**
      * Sets the value of the 'initiatorPrice' field.
      * @param value The value of 'initiatorPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setInitiatorPrice(java.lang.Integer value) {
      validate(fields()[14], value);
      this.initiatorPrice = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorPrice' field has been set.
      * @return True if the 'initiatorPrice' field has been set, false otherwise.
      */
    public boolean hasInitiatorPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'initiatorPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearInitiatorPrice() {
      initiatorPrice = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorQuantity' field.
      * @return The value.
      */
    public java.lang.Integer getInitiatorQuantity() {
      return initiatorQuantity;
    }


    /**
      * Sets the value of the 'initiatorQuantity' field.
      * @param value The value of 'initiatorQuantity'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setInitiatorQuantity(java.lang.Integer value) {
      validate(fields()[15], value);
      this.initiatorQuantity = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorQuantity' field has been set.
      * @return True if the 'initiatorQuantity' field has been set, false otherwise.
      */
    public boolean hasInitiatorQuantity() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'initiatorQuantity' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearInitiatorQuantity() {
      initiatorQuantity = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'auctionPrice' field.
      * @return The value.
      */
    public java.lang.Integer getAuctionPrice() {
      return auctionPrice;
    }


    /**
      * Sets the value of the 'auctionPrice' field.
      * @param value The value of 'auctionPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setAuctionPrice(java.lang.Integer value) {
      validate(fields()[16], value);
      this.auctionPrice = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'auctionPrice' field has been set.
      * @return True if the 'auctionPrice' field has been set, false otherwise.
      */
    public boolean hasAuctionPrice() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'auctionPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearAuctionPrice() {
      auctionPrice = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'auctionQuantity' field.
      * @return The value.
      */
    public java.lang.Integer getAuctionQuantity() {
      return auctionQuantity;
    }


    /**
      * Sets the value of the 'auctionQuantity' field.
      * @param value The value of 'auctionQuantity'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setAuctionQuantity(java.lang.Integer value) {
      validate(fields()[17], value);
      this.auctionQuantity = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'auctionQuantity' field has been set.
      * @return True if the 'auctionQuantity' field has been set, false otherwise.
      */
    public boolean hasAuctionQuantity() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'auctionQuantity' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearAuctionQuantity() {
      auctionQuantity = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordBuffer' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getRecordBuffer() {
      return recordBuffer;
    }


    /**
      * Sets the value of the 'recordBuffer' field.
      * @param value The value of 'recordBuffer'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setRecordBuffer(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[18], value);
      this.recordBuffer = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'recordBuffer' field has been set.
      * @return True if the 'recordBuffer' field has been set, false otherwise.
      */
    public boolean hasRecordBuffer() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'recordBuffer' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearRecordBuffer() {
      recordBuffer = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbTotalBuyFlag' field.
      * @return The value.
      */
    public java.lang.Integer getBbTotalBuyFlag() {
      return bbTotalBuyFlag;
    }


    /**
      * Sets the value of the 'bbTotalBuyFlag' field.
      * @param value The value of 'bbTotalBuyFlag'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setBbTotalBuyFlag(java.lang.Integer value) {
      validate(fields()[19], value);
      this.bbTotalBuyFlag = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'bbTotalBuyFlag' field has been set.
      * @return True if the 'bbTotalBuyFlag' field has been set, false otherwise.
      */
    public boolean hasBbTotalBuyFlag() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'bbTotalBuyFlag' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearBbTotalBuyFlag() {
      bbTotalBuyFlag = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbTotalSellFlag' field.
      * @return The value.
      */
    public java.lang.Integer getBbTotalSellFlag() {
      return bbTotalSellFlag;
    }


    /**
      * Sets the value of the 'bbTotalSellFlag' field.
      * @param value The value of 'bbTotalSellFlag'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setBbTotalSellFlag(java.lang.Integer value) {
      validate(fields()[20], value);
      this.bbTotalSellFlag = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'bbTotalSellFlag' field has been set.
      * @return True if the 'bbTotalSellFlag' field has been set, false otherwise.
      */
    public boolean hasBbTotalSellFlag() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'bbTotalSellFlag' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearBbTotalSellFlag() {
      bbTotalSellFlag = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalBuyQuantity' field.
      * @return The value.
      */
    public java.lang.Long getTotalBuyQuantity() {
      return totalBuyQuantity;
    }


    /**
      * Sets the value of the 'totalBuyQuantity' field.
      * @param value The value of 'totalBuyQuantity'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setTotalBuyQuantity(java.lang.Long value) {
      validate(fields()[21], value);
      this.totalBuyQuantity = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'totalBuyQuantity' field has been set.
      * @return True if the 'totalBuyQuantity' field has been set, false otherwise.
      */
    public boolean hasTotalBuyQuantity() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'totalBuyQuantity' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearTotalBuyQuantity() {
      totalBuyQuantity = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSellQuantity' field.
      * @return The value.
      */
    public java.lang.Long getTotalSellQuantity() {
      return totalSellQuantity;
    }


    /**
      * Sets the value of the 'totalSellQuantity' field.
      * @param value The value of 'totalSellQuantity'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setTotalSellQuantity(java.lang.Long value) {
      validate(fields()[22], value);
      this.totalSellQuantity = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSellQuantity' field has been set.
      * @return True if the 'totalSellQuantity' field has been set, false otherwise.
      */
    public boolean hasTotalSellQuantity() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'totalSellQuantity' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearTotalSellQuantity() {
      totalSellQuantity = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'mbpIndicator' field.
      * @return The value.
      */
    public java.lang.Integer getMbpIndicator() {
      return mbpIndicator;
    }


    /**
      * Sets the value of the 'mbpIndicator' field.
      * @param value The value of 'mbpIndicator'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setMbpIndicator(java.lang.Integer value) {
      validate(fields()[23], value);
      this.mbpIndicator = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'mbpIndicator' field has been set.
      * @return True if the 'mbpIndicator' field has been set, false otherwise.
      */
    public boolean hasMbpIndicator() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'mbpIndicator' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearMbpIndicator() {
      mbpIndicator = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'closingPrice' field.
      * @return The value.
      */
    public java.lang.Integer getClosingPrice() {
      return closingPrice;
    }


    /**
      * Sets the value of the 'closingPrice' field.
      * @param value The value of 'closingPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setClosingPrice(java.lang.Integer value) {
      validate(fields()[24], value);
      this.closingPrice = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'closingPrice' field has been set.
      * @return True if the 'closingPrice' field has been set, false otherwise.
      */
    public boolean hasClosingPrice() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'closingPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearClosingPrice() {
      closingPrice = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'openPrice' field.
      * @return The value.
      */
    public java.lang.Integer getOpenPrice() {
      return openPrice;
    }


    /**
      * Sets the value of the 'openPrice' field.
      * @param value The value of 'openPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setOpenPrice(java.lang.Integer value) {
      validate(fields()[25], value);
      this.openPrice = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'openPrice' field has been set.
      * @return True if the 'openPrice' field has been set, false otherwise.
      */
    public boolean hasOpenPrice() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'openPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearOpenPrice() {
      openPrice = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'highPrice' field.
      * @return The value.
      */
    public java.lang.Integer getHighPrice() {
      return highPrice;
    }


    /**
      * Sets the value of the 'highPrice' field.
      * @param value The value of 'highPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setHighPrice(java.lang.Integer value) {
      validate(fields()[26], value);
      this.highPrice = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'highPrice' field has been set.
      * @return True if the 'highPrice' field has been set, false otherwise.
      */
    public boolean hasHighPrice() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'highPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearHighPrice() {
      highPrice = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowPrice' field.
      * @return The value.
      */
    public java.lang.Integer getLowPrice() {
      return lowPrice;
    }


    /**
      * Sets the value of the 'lowPrice' field.
      * @param value The value of 'lowPrice'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setLowPrice(java.lang.Integer value) {
      validate(fields()[27], value);
      this.lowPrice = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'lowPrice' field has been set.
      * @return True if the 'lowPrice' field has been set, false otherwise.
      */
    public boolean hasLowPrice() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'lowPrice' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearLowPrice() {
      lowPrice = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'reserved' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getReserved() {
      return reserved;
    }


    /**
      * Sets the value of the 'reserved' field.
      * @param value The value of 'reserved'.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder setReserved(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[28], value);
      this.reserved = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'reserved' field has been set.
      * @return True if the 'reserved' field has been set, false otherwise.
      */
    public boolean hasReserved() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'reserved' field.
      * @return This builder.
      */
    public com.example.avro.dummy.Builder clearReserved() {
      reserved = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public dummy build() {
      try {
        dummy record = new dummy();
        record.token = fieldSetFlags()[0] ? this.token : (java.lang.Integer) defaultValue(fields()[0]);
        record.bookType = fieldSetFlags()[1] ? this.bookType : (java.lang.Integer) defaultValue(fields()[1]);
        record.tradingStatus = fieldSetFlags()[2] ? this.tradingStatus : (java.lang.Integer) defaultValue(fields()[2]);
        record.volumeTradedToday = fieldSetFlags()[3] ? this.volumeTradedToday : (java.lang.Long) defaultValue(fields()[3]);
        record.lastTradedPrice = fieldSetFlags()[4] ? this.lastTradedPrice : (java.lang.Integer) defaultValue(fields()[4]);
        record.netChangeIndicator = fieldSetFlags()[5] ? this.netChangeIndicator : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.filler = fieldSetFlags()[6] ? this.filler : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.netPriceChangeFromClosingPrice = fieldSetFlags()[7] ? this.netPriceChangeFromClosingPrice : (java.lang.Integer) defaultValue(fields()[7]);
        record.lastTradeQuantity = fieldSetFlags()[8] ? this.lastTradeQuantity : (java.lang.Integer) defaultValue(fields()[8]);
        record.lastTradeTime = fieldSetFlags()[9] ? this.lastTradeTime : (java.lang.Integer) defaultValue(fields()[9]);
        record.averageTradePrice = fieldSetFlags()[10] ? this.averageTradePrice : (java.lang.Integer) defaultValue(fields()[10]);
        record.auctionNumber = fieldSetFlags()[11] ? this.auctionNumber : (java.lang.Integer) defaultValue(fields()[11]);
        record.auctionStatus = fieldSetFlags()[12] ? this.auctionStatus : (java.lang.Integer) defaultValue(fields()[12]);
        record.initiatorType = fieldSetFlags()[13] ? this.initiatorType : (java.lang.Integer) defaultValue(fields()[13]);
        record.initiatorPrice = fieldSetFlags()[14] ? this.initiatorPrice : (java.lang.Integer) defaultValue(fields()[14]);
        record.initiatorQuantity = fieldSetFlags()[15] ? this.initiatorQuantity : (java.lang.Integer) defaultValue(fields()[15]);
        record.auctionPrice = fieldSetFlags()[16] ? this.auctionPrice : (java.lang.Integer) defaultValue(fields()[16]);
        record.auctionQuantity = fieldSetFlags()[17] ? this.auctionQuantity : (java.lang.Integer) defaultValue(fields()[17]);
        record.recordBuffer = fieldSetFlags()[18] ? this.recordBuffer : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[18]);
        record.bbTotalBuyFlag = fieldSetFlags()[19] ? this.bbTotalBuyFlag : (java.lang.Integer) defaultValue(fields()[19]);
        record.bbTotalSellFlag = fieldSetFlags()[20] ? this.bbTotalSellFlag : (java.lang.Integer) defaultValue(fields()[20]);
        record.totalBuyQuantity = fieldSetFlags()[21] ? this.totalBuyQuantity : (java.lang.Long) defaultValue(fields()[21]);
        record.totalSellQuantity = fieldSetFlags()[22] ? this.totalSellQuantity : (java.lang.Long) defaultValue(fields()[22]);
        record.mbpIndicator = fieldSetFlags()[23] ? this.mbpIndicator : (java.lang.Integer) defaultValue(fields()[23]);
        record.closingPrice = fieldSetFlags()[24] ? this.closingPrice : (java.lang.Integer) defaultValue(fields()[24]);
        record.openPrice = fieldSetFlags()[25] ? this.openPrice : (java.lang.Integer) defaultValue(fields()[25]);
        record.highPrice = fieldSetFlags()[26] ? this.highPrice : (java.lang.Integer) defaultValue(fields()[26]);
        record.lowPrice = fieldSetFlags()[27] ? this.lowPrice : (java.lang.Integer) defaultValue(fields()[27]);
        record.reserved = fieldSetFlags()[28] ? this.reserved : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[28]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<dummy>
    WRITER$ = (org.apache.avro.io.DatumWriter<dummy>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<dummy>
    READER$ = (org.apache.avro.io.DatumReader<dummy>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.token == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.token);
    }

    if (this.bookType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.bookType);
    }

    if (this.tradingStatus == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.tradingStatus);
    }

    if (this.volumeTradedToday == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.volumeTradedToday);
    }

    if (this.lastTradedPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.lastTradedPrice);
    }

    if (this.netChangeIndicator == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.netChangeIndicator);
    }

    if (this.filler == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.filler);
    }

    if (this.netPriceChangeFromClosingPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.netPriceChangeFromClosingPrice);
    }

    if (this.lastTradeQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.lastTradeQuantity);
    }

    if (this.lastTradeTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.lastTradeTime);
    }

    if (this.averageTradePrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.averageTradePrice);
    }

    if (this.auctionNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.auctionNumber);
    }

    if (this.auctionStatus == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.auctionStatus);
    }

    if (this.initiatorType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.initiatorType);
    }

    if (this.initiatorPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.initiatorPrice);
    }

    if (this.initiatorQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.initiatorQuantity);
    }

    if (this.auctionPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.auctionPrice);
    }

    if (this.auctionQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.auctionQuantity);
    }

    if (this.recordBuffer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.recordBuffer.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.recordBuffer) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.bbTotalBuyFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.bbTotalBuyFlag);
    }

    if (this.bbTotalSellFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.bbTotalSellFlag);
    }

    if (this.totalBuyQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.totalBuyQuantity);
    }

    if (this.totalSellQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.totalSellQuantity);
    }

    if (this.mbpIndicator == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.mbpIndicator);
    }

    if (this.closingPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.closingPrice);
    }

    if (this.openPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.openPrice);
    }

    if (this.highPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.highPrice);
    }

    if (this.lowPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.lowPrice);
    }

    if (this.reserved == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.reserved.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.CharSequence e1: this.reserved) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.token = null;
      } else {
        this.token = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bookType = null;
      } else {
        this.bookType = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tradingStatus = null;
      } else {
        this.tradingStatus = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.volumeTradedToday = null;
      } else {
        this.volumeTradedToday = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastTradedPrice = null;
      } else {
        this.lastTradedPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.netChangeIndicator = null;
      } else {
        this.netChangeIndicator = in.readString(this.netChangeIndicator instanceof Utf8 ? (Utf8)this.netChangeIndicator : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.filler = null;
      } else {
        this.filler = in.readString(this.filler instanceof Utf8 ? (Utf8)this.filler : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.netPriceChangeFromClosingPrice = null;
      } else {
        this.netPriceChangeFromClosingPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastTradeQuantity = null;
      } else {
        this.lastTradeQuantity = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastTradeTime = null;
      } else {
        this.lastTradeTime = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.averageTradePrice = null;
      } else {
        this.averageTradePrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.auctionNumber = null;
      } else {
        this.auctionNumber = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.auctionStatus = null;
      } else {
        this.auctionStatus = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.initiatorType = null;
      } else {
        this.initiatorType = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.initiatorPrice = null;
      } else {
        this.initiatorPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.initiatorQuantity = null;
      } else {
        this.initiatorQuantity = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.auctionPrice = null;
      } else {
        this.auctionPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.auctionQuantity = null;
      } else {
        this.auctionQuantity = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.recordBuffer = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.recordBuffer;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("recordBuffer").schema().getTypes().get(1));
          this.recordBuffer = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbTotalBuyFlag = null;
      } else {
        this.bbTotalBuyFlag = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbTotalSellFlag = null;
      } else {
        this.bbTotalSellFlag = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalBuyQuantity = null;
      } else {
        this.totalBuyQuantity = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSellQuantity = null;
      } else {
        this.totalSellQuantity = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mbpIndicator = null;
      } else {
        this.mbpIndicator = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.closingPrice = null;
      } else {
        this.closingPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.openPrice = null;
      } else {
        this.openPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.highPrice = null;
      } else {
        this.highPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lowPrice = null;
      } else {
        this.lowPrice = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.reserved = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a1 = this.reserved;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("reserved").schema().getTypes().get(1));
          this.reserved = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 29; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.token = null;
          } else {
            this.token = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bookType = null;
          } else {
            this.bookType = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tradingStatus = null;
          } else {
            this.tradingStatus = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.volumeTradedToday = null;
          } else {
            this.volumeTradedToday = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastTradedPrice = null;
          } else {
            this.lastTradedPrice = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.netChangeIndicator = null;
          } else {
            this.netChangeIndicator = in.readString(this.netChangeIndicator instanceof Utf8 ? (Utf8)this.netChangeIndicator : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.filler = null;
          } else {
            this.filler = in.readString(this.filler instanceof Utf8 ? (Utf8)this.filler : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.netPriceChangeFromClosingPrice = null;
          } else {
            this.netPriceChangeFromClosingPrice = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastTradeQuantity = null;
          } else {
            this.lastTradeQuantity = in.readInt();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastTradeTime = null;
          } else {
            this.lastTradeTime = in.readInt();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.averageTradePrice = null;
          } else {
            this.averageTradePrice = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.auctionNumber = null;
          } else {
            this.auctionNumber = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.auctionStatus = null;
          } else {
            this.auctionStatus = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.initiatorType = null;
          } else {
            this.initiatorType = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.initiatorPrice = null;
          } else {
            this.initiatorPrice = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.initiatorQuantity = null;
          } else {
            this.initiatorQuantity = in.readInt();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.auctionPrice = null;
          } else {
            this.auctionPrice = in.readInt();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.auctionQuantity = null;
          } else {
            this.auctionQuantity = in.readInt();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.recordBuffer = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.recordBuffer;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("recordBuffer").schema().getTypes().get(1));
              this.recordBuffer = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbTotalBuyFlag = null;
          } else {
            this.bbTotalBuyFlag = in.readInt();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbTotalSellFlag = null;
          } else {
            this.bbTotalSellFlag = in.readInt();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalBuyQuantity = null;
          } else {
            this.totalBuyQuantity = in.readLong();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSellQuantity = null;
          } else {
            this.totalSellQuantity = in.readLong();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mbpIndicator = null;
          } else {
            this.mbpIndicator = in.readInt();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.closingPrice = null;
          } else {
            this.closingPrice = in.readInt();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.openPrice = null;
          } else {
            this.openPrice = in.readInt();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.highPrice = null;
          } else {
            this.highPrice = in.readInt();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lowPrice = null;
          } else {
            this.lowPrice = in.readInt();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.reserved = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a1 = this.reserved;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("reserved").schema().getTypes().get(1));
              this.reserved = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










